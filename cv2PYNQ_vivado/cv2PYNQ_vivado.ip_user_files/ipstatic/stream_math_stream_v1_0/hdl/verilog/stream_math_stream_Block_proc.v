// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_math_stream_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        channels_dout,
        channels_empty_n,
        channels_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        rows_dout,
        rows_empty_n,
        rows_read,
        rows_out_din,
        rows_out_full_n,
        rows_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv31_7FFFFFFF = 31'b1111111111111111111111111111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] channels_dout;
input   channels_empty_n;
output   channels_read;
input  [10:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [10:0] rows_dout;
input   rows_empty_n;
output   rows_read;
output  [10:0] rows_out_din;
input   rows_out_full_n;
output   rows_out_write;
output  [30:0] ap_return_0;
output  [10:0] ap_return_1;
output  [30:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg channels_read;
reg cols_read;
reg rows_read;
reg rows_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_23;
reg    channels_blk_n;
reg    cols_blk_n;
reg    rows_blk_n;
reg    rows_out_blk_n;
reg  signed [31:0] channels_read_reg_156;
reg    ap_sig_70;
reg   [10:0] cols_read_reg_161;
reg   [10:0] rows_read_reg_166;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_84;
reg   [0:0] tmp_7_reg_176;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_93;
reg   [29:0] tmp_reg_181;
reg   [29:0] tmp_s_reg_186;
wire   [10:0] grp_fu_69_p0;
wire   [31:0] grp_fu_69_p2;
wire   [31:0] p_neg_i_fu_82_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_126;
wire   [30:0] p_lshr_cast_i_fu_108_p1;
wire   [30:0] p_neg_t_i_fu_111_p2;
wire   [30:0] p_lshr_f_cast_i_fu_117_p1;
wire   [30:0] col_packets_fu_120_p3;
wire   [10:0] tmp_14_out_fu_127_p2;
wire   [30:0] tmp_15_out_fu_132_p2;
reg   [4:0] ap_NS_fsm;
wire   [31:0] grp_fu_69_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'b1;
end

stream_math_stream_mul_11ns_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
stream_math_stream_mul_11ns_32s_32_3_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_69_p0),
    .din1(channels_read_reg_156),
    .ce(1'b1),
    .dout(grp_fu_69_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_70)) begin
        channels_read_reg_156 <= channels_dout;
        cols_read_reg_161 <= cols_dout;
        rows_read_reg_166 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_7_reg_176 <= grp_fu_69_p2[ap_const_lv32_1F];
        tmp_reg_181 <= {{p_neg_i_fu_82_p2[ap_const_lv32_1F : ap_const_lv32_2]}};
        tmp_s_reg_186 <= {{grp_fu_69_p2[ap_const_lv32_1F : ap_const_lv32_2]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_84) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_93) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_126) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        channels_blk_n = channels_empty_n;
    end else begin
        channels_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_70)) begin
        channels_read = 1'b1;
    end else begin
        channels_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_70)) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        rows_out_blk_n = rows_out_full_n;
    end else begin
        rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_70)) begin
        rows_out_write = 1'b1;
    end else begin
        rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_70)) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_70) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return_0 = col_packets_fu_120_p3;

assign ap_return_1 = tmp_14_out_fu_127_p2;

assign ap_return_2 = tmp_15_out_fu_132_p2;

always @ (*) begin
    ap_sig_126 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_23 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_70 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (channels_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (rows_out_full_n == 1'b0));
end

always @ (*) begin
    ap_sig_84 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_93 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign col_packets_fu_120_p3 = ((tmp_7_reg_176[0:0] === 1'b1) ? p_neg_t_i_fu_111_p2 : p_lshr_f_cast_i_fu_117_p1);

assign grp_fu_69_p0 = grp_fu_69_p00;

assign grp_fu_69_p00 = cols_read_reg_161;

assign p_lshr_cast_i_fu_108_p1 = tmp_reg_181;

assign p_lshr_f_cast_i_fu_117_p1 = tmp_s_reg_186;

assign p_neg_i_fu_82_p2 = (ap_const_lv32_0 - grp_fu_69_p2);

assign p_neg_t_i_fu_111_p2 = (ap_const_lv31_0 - p_lshr_cast_i_fu_108_p1);

assign rows_out_din = rows_dout;

assign tmp_14_out_fu_127_p2 = ($signed(rows_read_reg_166) + $signed(ap_const_lv11_7FF));

assign tmp_15_out_fu_132_p2 = ($signed(col_packets_fu_120_p3) + $signed(ap_const_lv31_7FFFFFFF));

endmodule //stream_math_stream_Block_proc
