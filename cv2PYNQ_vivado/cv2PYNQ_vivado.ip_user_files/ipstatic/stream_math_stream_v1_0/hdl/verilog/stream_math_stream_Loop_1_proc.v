// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_math_stream_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        g_img_data_stream_0_V_din,
        g_img_data_stream_0_V_full_n,
        g_img_data_stream_0_V_write,
        in_stream_TLAST
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_5 = 32'b101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
output  [7:0] g_img_data_stream_0_V_din;
input   g_img_data_stream_0_V_full_n;
output   g_img_data_stream_0_V_write;
input  [0:0] in_stream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_TREADY;
reg[7:0] g_img_data_stream_0_V_din;
reg g_img_data_stream_0_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
reg    in_stream_TDATA_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_45;
reg    g_img_data_stream_0_V_blk_n;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_53;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_61;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_69;
reg   [0:0] in_stream_last_V_tmp_reg_112;
reg    ap_sig_77;
reg   [7:0] tmp_3_reg_116;
reg   [7:0] tmp_4_reg_121;
reg   [7:0] tmp_6_reg_126;
wire   [7:0] tmp_2_fu_77_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_131;
reg   [5:0] ap_NS_fsm;
reg    ap_sig_140;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_77)) begin
        in_stream_last_V_tmp_reg_112 <= in_stream_TLAST;
        tmp_3_reg_116 <= {{in_stream_TDATA[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_4_reg_121 <= {{in_stream_TDATA[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp_6_reg_126 <= {{in_stream_TDATA[ap_const_lv32_1F : ap_const_lv32_18]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_45) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_53) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_69) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_131) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        g_img_data_stream_0_V_blk_n = g_img_data_stream_0_V_full_n;
    end else begin
        g_img_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(g_img_data_stream_0_V_full_n == 1'b0))) begin
        g_img_data_stream_0_V_din = tmp_6_reg_126;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(g_img_data_stream_0_V_full_n == 1'b0))) begin
        g_img_data_stream_0_V_din = tmp_4_reg_121;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(g_img_data_stream_0_V_full_n == 1'b0))) begin
        g_img_data_stream_0_V_din = tmp_3_reg_116;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_77)) begin
        g_img_data_stream_0_V_din = tmp_2_fu_77_p1;
    end else begin
        g_img_data_stream_0_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_77) | ((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(g_img_data_stream_0_V_full_n == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(g_img_data_stream_0_V_full_n == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(g_img_data_stream_0_V_full_n == 1'b0)))) begin
        g_img_data_stream_0_V_write = 1'b1;
    end else begin
        g_img_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        in_stream_TDATA_blk_n = in_stream_TVALID;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_77)) begin
        in_stream_TREADY = 1'b1;
    end else begin
        in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_140) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~ap_sig_77) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(g_img_data_stream_0_V_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(g_img_data_stream_0_V_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if ((~(g_img_data_stream_0_V_full_n == 1'b0) & (in_stream_last_V_tmp_reg_112 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(g_img_data_stream_0_V_full_n == 1'b0) & ~(in_stream_last_V_tmp_reg_112 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_131 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_140 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_45 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_53 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_69 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_77 = ((in_stream_TVALID == 1'b0) | (g_img_data_stream_0_V_full_n == 1'b0));
end

assign tmp_2_fu_77_p1 = in_stream_TDATA[7:0];

endmodule //stream_math_stream_Loop_1_proc
