-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hysteresis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    threshold_low : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_high : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hysteresis is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal or_cond7_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_or_cond7_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_2_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_t_V_2_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal r_V_fu_269_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_3_fu_279_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_285_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_4_fu_291_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_23_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_28_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_30_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_30_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_1_addr_reg_913 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp0_iter1_linebuff_val_1_addr_reg_913 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_cond6_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond6_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_or_cond6_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_or_cond7_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal linebuff_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce0 : STD_LOGIC;
    signal linebuff_val_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce1 : STD_LOGIC;
    signal linebuff_val_0_we1 : STD_LOGIC;
    signal linebuff_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_1_ce0 : STD_LOGIC;
    signal linebuff_val_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal linebuff_val_1_ce1 : STD_LOGIC;
    signal linebuff_val_1_we1 : STD_LOGIC;
    signal t_V_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_t_V_2_phi_fu_257_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_s_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_s_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal element_gd_s_fu_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_fu_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_0_0_win_va_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_2_fu_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_fu_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_0_0_win_va_fu_481_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_2_fu_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_fu_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_0_0_win_va_fu_474_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_2_fu_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_cast_fu_265_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_2_cast_fu_275_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_297_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_317_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_cast_fu_344_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_50_fu_375_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_demorgan_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt3_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp28_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp29_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev6_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp33_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp30_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp31_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp34_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_demorgan_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component nonmax_suppressioFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    linebuff_val_0_U : component nonmax_suppressioFfa
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_0_address0,
        ce0 => linebuff_val_0_ce0,
        q0 => linebuff_val_0_q0,
        address1 => linebuff_val_0_address1,
        ce1 => linebuff_val_0_ce1,
        we1 => linebuff_val_0_we1,
        d1 => element_gd_s_fu_134);

    linebuff_val_1_U : component nonmax_suppressioFfa
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_1_address0,
        ce0 => linebuff_val_1_ce0,
        q0 => linebuff_val_1_q0,
        address1 => ap_reg_pp0_iter1_linebuff_val_1_addr_reg_913,
        ce1 => linebuff_val_1_ce1,
        we1 => linebuff_val_1_we1,
        d1 => tmp0_reg_934);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_23_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_23_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((tmp_23_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_2_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_28_reg_893 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_2_reg_253 <= j_V_reg_897;
            elsif (((tmp_23_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_2_reg_253 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_242 <= i_V_reg_868;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_linebuff_val_1_addr_reg_913 <= linebuff_val_1_addr_reg_913;
                ap_reg_pp0_iter1_or_cond6_reg_924 <= or_cond6_reg_924;
                ap_reg_pp0_iter1_or_cond7_reg_930 <= or_cond7_reg_930;
                ap_reg_pp0_iter1_or_cond_reg_909 <= or_cond_reg_909;
                ap_reg_pp0_iter1_t_V_2_reg_253 <= t_V_2_reg_253;
                ap_reg_pp0_iter1_tmp_28_reg_893 <= tmp_28_reg_893;
                ap_reg_pp0_iter1_tmp_30_reg_902 <= tmp_30_reg_902;
                tmp_28_reg_893 <= tmp_28_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_or_cond6_reg_924 <= ap_reg_pp0_iter1_or_cond6_reg_924;
                ap_reg_pp0_iter2_or_cond7_reg_930 <= ap_reg_pp0_iter1_or_cond7_reg_930;
                slt4_reg_944 <= slt4_fu_591_p2;
                slt5_reg_949 <= slt5_fu_596_p2;
                slt6_reg_954 <= slt6_fu_601_p2;
                slt7_reg_959 <= slt7_fu_606_p2;
                slt8_reg_964 <= slt8_fu_611_p2;
                tmp27_reg_969 <= tmp27_fu_634_p2;
                tmp_37_reg_939 <= tmp_37_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_reg_909 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                element_gd_s_fu_134 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_868 <= i_V_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_878 <= icmp_fu_327_p2;
                tmp_24_reg_873 <= tmp_24_fu_312_p2;
                tmp_26_reg_883 <= tmp_26_fu_333_p2;
                tmp_27_reg_888 <= tmp_27_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_V_reg_897 <= j_V_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_30_fu_359_p2 = ap_const_lv1_1) and (tmp_28_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                linebuff_val_1_addr_reg_913 <= tmp_32_fu_369_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_28_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond6_reg_924 <= or_cond6_fu_406_p2;
                or_cond7_reg_930 <= or_cond7_fu_418_p2;
                or_cond_reg_909 <= or_cond_fu_364_p2;
                tmp_30_reg_902 <= tmp_30_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_30_reg_902 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp0_reg_934 <= linebuff_val_0_q0;
                tmp0_s_fu_130 <= linebuff_val_0_q0;
                tmp1_s_fu_126 <= linebuff_val_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_28_reg_893 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                win_val_0_1_2_fu_142 <= win_val_0_1_fu_138;
                win_val_0_1_fu_138 <= win_val_0_0_0_win_va_fu_488_p3;
                win_val_1_1_2_fu_150 <= win_val_1_1_fu_146;
                win_val_1_1_fu_146 <= win_val_1_0_0_win_va_fu_481_p3;
                win_val_2_1_2_fu_158 <= win_val_2_1_fu_154;
                win_val_2_1_fu_154 <= win_val_2_0_0_win_va_fu_474_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, tmp_23_fu_301_p2, ap_CS_fsm_state2, tmp_28_fu_348_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_23_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_28_fu_348_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((tmp_28_fu_348_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_909, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_or_cond7_reg_930)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_reg_909 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_909, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_or_cond7_reg_930)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_reg_909 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond_reg_909, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_or_cond7_reg_930)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond_reg_909 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, or_cond_reg_909)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((or_cond_reg_909 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(dst_data_stream_V_full_n, ap_reg_pp0_iter2_or_cond7_reg_930)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_28_fu_348_p2)
    begin
        if ((tmp_28_fu_348_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_23_fu_301_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_23_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_2_phi_fu_257_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, t_V_2_reg_253, tmp_28_reg_893, j_V_reg_897)
    begin
        if (((tmp_28_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_2_phi_fu_257_p4 <= j_V_reg_897;
        else 
            ap_phi_mux_t_V_2_phi_fu_257_p4 <= t_V_2_reg_253;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_23_fu_301_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_23_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_or_cond7_reg_930)
    begin
        if (((ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_46_fu_743_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_or_cond7_reg_930, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter2_or_cond7_reg_930 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_306_p2 <= std_logic_vector(unsigned(t_V_reg_242) + unsigned(ap_const_lv32_1));
    icmp2_fu_385_p2 <= "1" when (tmp_50_fu_375_p4 = ap_const_lv31_0) else "0";
    icmp_fu_327_p2 <= "1" when (tmp_fu_317_p4 = ap_const_lv31_0) else "0";
    j_V_fu_353_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_2_phi_fu_257_p4) + unsigned(ap_const_lv32_1));
    lhs_V_2_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_cols_V),33));
    lhs_V_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_rows_V),33));
    linebuff_val_0_address0 <= tmp_32_fu_369_p1(11 - 1 downto 0);
    linebuff_val_0_address1 <= tmp_33_fu_442_p1(11 - 1 downto 0);

    linebuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            linebuff_val_0_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_0_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_or_cond_reg_909, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_or_cond_reg_909 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_0_we1 <= ap_const_logic_1;
        else 
            linebuff_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuff_val_1_address0 <= tmp_32_fu_369_p1(11 - 1 downto 0);

    linebuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            linebuff_val_1_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_1_ce1 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_tmp_30_reg_902, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_tmp_30_reg_902 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuff_val_1_we1 <= ap_const_logic_1;
        else 
            linebuff_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond6_fu_406_p2 <= (tmp25_fu_401_p2 or tmp24_fu_396_p2);
    or_cond7_fu_418_p2 <= (tmp_47_fu_412_p2 or tmp_26_reg_883);
    or_cond_fu_364_p2 <= (tmp_30_fu_359_p2 and tmp_24_reg_873);
    r_V_3_fu_279_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_275_p1) + unsigned(ap_const_lv33_1));
    r_V_4_fu_291_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_275_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    r_V_fu_269_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_265_p1) + unsigned(ap_const_lv33_1));
    rev1_fu_563_p2 <= (slt1_fu_558_p2 xor ap_const_lv1_1);
    rev2_fu_574_p2 <= (slt2_fu_569_p2 xor ap_const_lv1_1);
    rev3_fu_585_p2 <= (slt3_fu_580_p2 xor ap_const_lv1_1);
    rev4_fu_679_p2 <= (slt4_reg_944 xor ap_const_lv1_1);
    rev5_fu_684_p2 <= (slt5_reg_949 xor ap_const_lv1_1);
    rev6_fu_689_p2 <= (slt6_reg_954 xor ap_const_lv1_1);
    rev7_fu_694_p2 <= (slt7_reg_959 xor ap_const_lv1_1);
    rev8_fu_699_p2 <= (slt8_reg_964 xor ap_const_lv1_1);
    rev_fu_552_p2 <= (slt_fu_547_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_728_p2 <= (tmp31_fu_722_p2 and tmp27_reg_969);
    sel_tmp6_demorgan_fu_536_p2 <= (tmp_37_fu_499_p2 or ap_reg_pp0_iter1_or_cond6_reg_924);
    sel_tmp6_fu_541_p2 <= (sel_tmp6_demorgan_fu_536_p2 xor ap_const_lv1_1);
    slt1_fu_558_p2 <= "1" when (signed(threshold_high) < signed(tmp_38_fu_504_p1)) else "0";
    slt2_fu_569_p2 <= "1" when (signed(threshold_high) < signed(tmp_39_fu_508_p1)) else "0";
    slt3_fu_580_p2 <= "1" when (signed(threshold_high) < signed(tmp_40_fu_512_p1)) else "0";
    slt4_fu_591_p2 <= "1" when (signed(threshold_high) < signed(tmp_41_fu_516_p1)) else "0";
    slt5_fu_596_p2 <= "1" when (signed(threshold_high) < signed(tmp_42_fu_520_p1)) else "0";
    slt6_fu_601_p2 <= "1" when (signed(threshold_high) < signed(tmp_43_fu_524_p1)) else "0";
    slt7_fu_606_p2 <= "1" when (signed(threshold_high) < signed(tmp_44_fu_528_p1)) else "0";
    slt8_fu_611_p2 <= "1" when (signed(threshold_high) < signed(tmp_45_fu_532_p1)) else "0";
    slt_fu_547_p2 <= "1" when (signed(threshold_high) < signed(tmp_36_fu_495_p1)) else "0";

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond_reg_909)
    begin
        if (((or_cond_reg_909 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond_reg_909, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond_reg_909 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp24_fu_396_p2 <= (tmp_27_reg_888 or icmp2_fu_385_p2);
    tmp25_fu_401_p2 <= (tmp_35_fu_391_p2 or icmp_reg_878);
    tmp26_fu_616_p2 <= (sel_tmp6_fu_541_p2 and rev_fu_552_p2);
    tmp27_fu_634_p2 <= (tmp29_fu_628_p2 and tmp26_fu_616_p2);
    tmp28_fu_622_p2 <= (rev3_fu_585_p2 and rev2_fu_574_p2);
    tmp29_fu_628_p2 <= (tmp28_fu_622_p2 and rev1_fu_563_p2);
    tmp30_fu_704_p2 <= (rev5_fu_684_p2 and rev4_fu_679_p2);
    tmp31_fu_722_p2 <= (tmp33_fu_716_p2 and tmp30_fu_704_p2);
    tmp32_fu_710_p2 <= (rev8_fu_699_p2 and rev7_fu_694_p2);
    tmp33_fu_716_p2 <= (tmp32_fu_710_p2 and rev6_fu_689_p2);
    tmp34_fu_733_p2 <= (sel_tmp4_fu_728_p2 or ap_reg_pp0_iter2_or_cond6_reg_924);
    tmp_23_fu_301_p2 <= "1" when (unsigned(tmp_cast_fu_297_p1) < unsigned(r_V_fu_269_p2)) else "0";
    tmp_24_fu_312_p2 <= "1" when (unsigned(t_V_reg_242) < unsigned(src_rows_V)) else "0";
    tmp_26_fu_333_p2 <= "1" when (t_V_reg_242 = ap_const_lv32_0) else "0";
    tmp_27_fu_339_p2 <= "1" when (signed(tmp_cast_fu_297_p1) > signed(tmp_s_fu_285_p2)) else "0";
    tmp_28_fu_348_p2 <= "1" when (unsigned(tmp_29_cast_fu_344_p1) < unsigned(r_V_3_fu_279_p2)) else "0";
    tmp_29_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_2_phi_fu_257_p4),33));
    tmp_30_fu_359_p2 <= "1" when (unsigned(ap_phi_mux_t_V_2_phi_fu_257_p4) < unsigned(src_cols_V)) else "0";
    tmp_32_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_2_phi_fu_257_p4),64));
    tmp_33_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_t_V_2_reg_253),64));
    tmp_35_fu_391_p2 <= "1" when (signed(tmp_29_cast_fu_344_p1) > signed(r_V_4_fu_291_p2)) else "0";
    tmp_36_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_fu_146),32));
    tmp_37_fu_499_p2 <= "1" when (signed(tmp_36_fu_495_p1) < signed(threshold_low)) else "0";
    tmp_38_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_0_0_win_va_fu_488_p3),32));
    tmp_39_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_fu_138),32));
    tmp_40_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_2_fu_142),32));
    tmp_41_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_0_0_win_va_fu_481_p3),32));
    tmp_42_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_2_fu_150),32));
    tmp_43_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_0_0_win_va_fu_474_p3),32));
    tmp_44_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_fu_154),32));
    tmp_45_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_2_fu_158),32));
    tmp_46_fu_743_p2 <= (tmp_55_demorgan_fu_738_p2 xor ap_const_lv1_1);
    tmp_47_fu_412_p2 <= "1" when (ap_phi_mux_t_V_2_phi_fu_257_p4 = ap_const_lv32_0) else "0";
    tmp_50_fu_375_p4 <= ap_phi_mux_t_V_2_phi_fu_257_p4(31 downto 1);
    tmp_55_demorgan_fu_738_p2 <= (tmp_37_reg_939 or tmp34_fu_733_p2);
    tmp_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_242),33));
    tmp_fu_317_p4 <= t_V_reg_242(31 downto 1);
    tmp_s_fu_285_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_265_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    win_val_0_0_0_win_va_fu_488_p3 <= 
        element_gd_s_fu_134 when (ap_reg_pp0_iter1_tmp_30_reg_902(0) = '1') else 
        win_val_0_1_fu_138;
    win_val_1_0_0_win_va_fu_481_p3 <= 
        tmp0_s_fu_130 when (ap_reg_pp0_iter1_tmp_30_reg_902(0) = '1') else 
        win_val_1_1_fu_146;
    win_val_2_0_0_win_va_fu_474_p3 <= 
        tmp1_s_fu_126 when (ap_reg_pp0_iter1_tmp_30_reg_902(0) = '1') else 
        win_val_2_1_fu_154;
end behav;
