-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_3_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_packets_loc_dout : IN STD_LOGIC_VECTOR (30 downto 0);
    col_packets_loc_empty_n : IN STD_LOGIC;
    col_packets_loc_read : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    p_neg393_i_loc_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    p_neg393_i_loc_empty_n : IN STD_LOGIC;
    p_neg393_i_loc_read : OUT STD_LOGIC;
    g_img_1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    g_img_1_data_stream_0_V_empty_n : IN STD_LOGIC;
    g_img_1_data_stream_0_V_read : OUT STD_LOGIC;
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_3_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv42_1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_load_A : STD_LOGIC;
    signal out_stream_user_V_1_load_B : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_load_A : STD_LOGIC;
    signal out_stream_last_V_1_load_B : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal col_packets_loc_blk_n : STD_LOGIC;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg393_i_loc_blk_n : STD_LOGIC;
    signal g_img_1_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal indvar_flatten_reg_159 : STD_LOGIC_VECTOR (41 downto 0);
    signal r1_i_i_reg_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_1_rec_i_i_reg_181 : STD_LOGIC_VECTOR (29 downto 0);
    signal col_packets_loc_read_reg_334 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_neg393_i_loc_read_reg_341 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_17_i_i_fu_210_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_i_i_reg_357 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal bound_reg_362 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_29_i_i_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_229_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal indvar_flatten_next_reg_377 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_23_i_i_mid1_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i_mid1_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i3_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_i3_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal r1_i_i_mid2_fu_251_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r1_i_i_mid2_reg_392 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_1_rec_i_i_mid2_fu_259_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_1_rec_i_i_mid2_reg_398 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_32_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_user_V_tm_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_user_V_tm_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_tm_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_tm_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_34_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal c_fu_319_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal c_reg_428 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_324_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_163_p4 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_phi_mux_r1_i_i_phi_fu_174_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal tmp_fu_193_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_cast_i_i_fu_215_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r2_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_275_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_284_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_fu_279_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_i_i_fu_294_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal c_cast_i_i_mid2_cast_fu_271_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_23_i_i_mid2_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_i_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_204_p00 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_204_p10 : STD_LOGIC_VECTOR (41 downto 0);

    component dilate_hls_mul_31hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    dilate_hls_mul_31hbi_U45 : component dilate_hls_mul_31hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 31,
        din1_WIDTH => 11,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_out = ap_const_logic_1) and (out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_data_V_1_state = ap_const_lv2_3)) or ((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_out = ap_const_logic_1) and (out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_in = ap_const_logic_1) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_wr <= not(out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_last_V_1_state = ap_const_lv2_3)) or ((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_user_V_1_ack_out = ap_const_logic_1) and (out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_user_V_1_ack_in = ap_const_logic_1) and (out_stream_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_user_V_1_sel_wr <= not(out_stream_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_user_V_1_state = ap_const_lv2_3)) or ((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_159 <= indvar_flatten_next_reg_377;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_159 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    p_1_rec_i_i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_1_rec_i_i_reg_181 <= c_reg_428;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_1_rec_i_i_reg_181 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    r1_i_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r1_i_i_reg_170 <= r1_i_i_mid2_reg_392;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r1_i_i_reg_170 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_373 <= exitcond_flatten_reg_373;
                exitcond_flatten_reg_373 <= exitcond_flatten_fu_224_p2;
                tmp_29_i_i_reg_367 <= tmp_29_i_i_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound_reg_362 <= grp_fu_204_p2;
                tmp_17_i_i_reg_357 <= tmp_17_i_i_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                c_reg_428 <= c_fu_319_p2;
                tmp_34_reg_423 <= g_img_1_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((col_packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_neg393_i_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                col_packets_loc_read_reg_334 <= col_packets_loc_dout;
                p_neg393_i_loc_read_reg_341 <= p_neg393_i_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_377 <= indvar_flatten_next_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_data_V_1_payload_A <= p_Result_s_fu_324_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_data_V_1_payload_B <= p_Result_s_fu_324_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_last_V_1_payload_A <= out_stream_last_V_tm_reg_413;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_last_V_1_payload_B <= out_stream_last_V_tm_reg_413;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_stream_last_V_tm_reg_413 <= out_stream_last_V_tm_fu_313_p2;
                out_stream_user_V_tm_reg_408 <= out_stream_user_V_tm_fu_302_p2;
                p_1_rec_i_i_mid2_reg_398 <= p_1_rec_i_i_mid2_fu_259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_user_V_1_load_A = ap_const_logic_1)) then
                out_stream_user_V_1_payload_A <= out_stream_user_V_tm_reg_408;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_user_V_1_load_B = ap_const_logic_1)) then
                out_stream_user_V_1_payload_B <= out_stream_user_V_tm_reg_408;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r1_i_i_mid2_reg_392 <= r1_i_i_mid2_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_23_i_i3_reg_387 <= tmp_23_i_i3_fu_246_p2;
                tmp_23_i_i_mid1_reg_382 <= tmp_23_i_i_mid1_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_32_reg_403 <= g_img_1_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_33_reg_418 <= g_img_1_data_stream_0_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, col_packets_loc_empty_n, out_stream_data_V_1_ack_in, p_neg393_i_loc_empty_n, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_224_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state13, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((col_packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_neg393_i_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage1_01001 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage1_11001 <= (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage1_subdone <= (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_packets_loc_empty_n, p_neg393_i_loc_empty_n)
    begin
                ap_block_state1 <= ((col_packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_neg393_i_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage3_iter0_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373)
    begin
                ap_block_state10_pp0_stage3_iter0 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(out_stream_last_V_1_ack_in, exitcond_flatten_reg_373)
    begin
                ap_block_state11_io <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (out_stream_last_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter1_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state12_io_assign_proc : process(out_stream_last_V_1_ack_in, ap_reg_pp0_iter1_exitcond_flatten_reg_373)
    begin
                ap_block_state12_io <= ((ap_reg_pp0_iter1_exitcond_flatten_reg_373 = ap_const_lv1_0) and (out_stream_last_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in)
    begin
                ap_block_state13 <= ((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage1_iter0_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373)
    begin
                ap_block_state8_pp0_stage1_iter0 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage2_iter0_assign_proc : process(g_img_1_data_stream_0_V_empty_n, exitcond_flatten_reg_373)
    begin
                ap_block_state9_pp0_stage2_iter0 <= ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (g_img_1_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state7_assign_proc : process(exitcond_flatten_fu_224_p2)
    begin
        if ((exitcond_flatten_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_stream_data_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_163_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_373, indvar_flatten_reg_159, indvar_flatten_next_reg_377)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_163_p4 <= indvar_flatten_next_reg_377;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_163_p4 <= indvar_flatten_reg_159;
        end if; 
    end process;


    ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_373, p_1_rec_i_i_reg_181, c_reg_428)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 <= c_reg_428;
        else 
            ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 <= p_1_rec_i_i_reg_181;
        end if; 
    end process;


    ap_phi_mux_r1_i_i_phi_fu_174_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_373, r1_i_i_reg_170, r1_i_i_mid2_reg_392)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_r1_i_i_phi_fu_174_p4 <= r1_i_i_mid2_reg_392;
        else 
            ap_phi_mux_r1_i_i_phi_fu_174_p4 <= r1_i_i_reg_170;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_i_i_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4),31));
    c_cast_i_i_mid2_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_rec_i_i_mid2_fu_259_p3),31));
    c_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(p_1_rec_i_i_mid2_reg_398));

    col_packets_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_packets_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_packets_loc_blk_n <= col_packets_loc_empty_n;
        else 
            col_packets_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_packets_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_packets_loc_empty_n, p_neg393_i_loc_empty_n)
    begin
        if ((not(((col_packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_neg393_i_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_packets_loc_read <= ap_const_logic_1;
        else 
            col_packets_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_224_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_163_p4 = bound_reg_362) else "0";

    g_img_1_data_stream_0_V_blk_n_assign_proc : process(g_img_1_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_373, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            g_img_1_data_stream_0_V_blk_n <= g_img_1_data_stream_0_V_empty_n;
        else 
            g_img_1_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g_img_1_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            g_img_1_data_stream_0_V_read <= ap_const_logic_1;
        else 
            g_img_1_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_204_p0 <= grp_fu_204_p00(31 - 1 downto 0);
    grp_fu_204_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_packets_loc_read_reg_334),42));
    grp_fu_204_p1 <= grp_fu_204_p10(11 - 1 downto 0);
    grp_fu_204_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_193_p1),42));
    indvar_flatten_next_fu_229_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_163_p4) + unsigned(ap_const_lv42_1));
    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_373, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_reg_pp0_iter1_exitcond_flatten_reg_373)
    begin
        if ((((ap_reg_pp0_iter1_exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_last_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((out_stream_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_state_cmp_full and out_stream_data_V_1_sel_wr);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_last_V_1_data_out_assign_proc : process(out_stream_last_V_1_payload_A, out_stream_last_V_1_payload_B, out_stream_last_V_1_sel)
    begin
        if ((out_stream_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_B;
        else 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_last_V_1_load_A <= (out_stream_last_V_1_state_cmp_full and not(out_stream_last_V_1_sel_wr));
    out_stream_last_V_1_load_B <= (out_stream_last_V_1_state_cmp_full and out_stream_last_V_1_sel_wr);
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;
    out_stream_last_V_1_state_cmp_full <= '0' when (out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_last_V_tm_fu_313_p2 <= (tmp_41_i_i_fu_308_p2 and tmp_23_i_i_mid2_fu_266_p3);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;

    out_stream_user_V_1_data_out_assign_proc : process(out_stream_user_V_1_payload_A, out_stream_user_V_1_payload_B, out_stream_user_V_1_sel)
    begin
        if ((out_stream_user_V_1_sel = ap_const_logic_1)) then 
            out_stream_user_V_1_data_out <= out_stream_user_V_1_payload_B;
        else 
            out_stream_user_V_1_data_out <= out_stream_user_V_1_payload_A;
        end if; 
    end process;

    out_stream_user_V_1_load_A <= (out_stream_user_V_1_state_cmp_full and not(out_stream_user_V_1_sel_wr));
    out_stream_user_V_1_load_B <= (out_stream_user_V_1_state_cmp_full and out_stream_user_V_1_sel_wr);
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;
    out_stream_user_V_1_state_cmp_full <= '0' when (out_stream_user_V_1_state = ap_const_lv2_1) else '1';

    out_stream_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_373, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_373 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);
    out_stream_user_V_tm_fu_302_p2 <= "1" when (tmp_39_i_i_fu_294_p3 = ap_const_lv30_0) else "0";
    p_1_rec_i_i_mid2_fu_259_p3 <= 
        p_1_rec_i_i_reg_181 when (tmp_29_i_i_reg_367(0) = '1') else 
        ap_const_lv30_0;
    p_Result_s_fu_324_p5 <= (((g_img_1_data_stream_0_V_dout & tmp_34_reg_423) & tmp_33_reg_418) & tmp_32_reg_403);

    p_neg393_i_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_neg393_i_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_neg393_i_loc_blk_n <= p_neg393_i_loc_empty_n;
        else 
            p_neg393_i_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_neg393_i_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_packets_loc_empty_n, p_neg393_i_loc_empty_n)
    begin
        if ((not(((col_packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_neg393_i_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_neg393_i_loc_read <= ap_const_logic_1;
        else 
            p_neg393_i_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    r1_i_i_mid2_fu_251_p3 <= 
        ap_phi_mux_r1_i_i_phi_fu_174_p4 when (tmp_29_i_i_fu_219_p2(0) = '1') else 
        r2_fu_235_p2;
    r2_fu_235_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_r1_i_i_phi_fu_174_p4));
    tmp_17_fu_284_p4 <= p_1_rec_i_i_mid2_fu_259_p3(29 downto 11);
    tmp_17_i_i_fu_210_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(col_packets_loc_read_reg_334));
    tmp_23_i_i3_fu_246_p2 <= "1" when (ap_phi_mux_r1_i_i_phi_fu_174_p4 = p_neg393_i_loc_read_reg_341) else "0";
    tmp_23_i_i_mid1_fu_241_p2 <= "1" when (r2_fu_235_p2 = p_neg393_i_loc_read_reg_341) else "0";
    tmp_23_i_i_mid2_fu_266_p3 <= 
        tmp_23_i_i3_reg_387 when (tmp_29_i_i_reg_367(0) = '1') else 
        tmp_23_i_i_mid1_reg_382;
    tmp_29_i_i_fu_219_p2 <= "1" when (signed(c_cast_i_i_fu_215_p1) < signed(col_packets_loc_read_reg_334)) else "0";
    tmp_36_fu_275_p1 <= p_1_rec_i_i_mid2_fu_259_p3(11 - 1 downto 0);
    tmp_39_i_i_fu_294_p3 <= (tmp_17_fu_284_p4 & tmp_s_fu_279_p2);
    tmp_41_i_i_fu_308_p2 <= "1" when (c_cast_i_i_mid2_cast_fu_271_p1 = tmp_17_i_i_reg_357) else "0";
    tmp_fu_193_p1 <= rows(11 - 1 downto 0);
    tmp_s_fu_279_p2 <= (tmp_36_fu_275_p1 or r1_i_i_mid2_reg_392);
end behav;
