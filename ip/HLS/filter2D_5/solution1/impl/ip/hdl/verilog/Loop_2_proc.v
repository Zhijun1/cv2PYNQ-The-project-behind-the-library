// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        col_packets_cast_loc_dout,
        col_packets_cast_loc_empty_n,
        col_packets_cast_loc_read,
        p_lshr_f_cast_loc_dout,
        p_lshr_f_cast_loc_empty_n,
        p_lshr_f_cast_loc_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        g_img_1_data_stream_0_V_dout,
        g_img_1_data_stream_0_V_empty_n,
        g_img_1_data_stream_0_V_read,
        out_stream_TUSER,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_pp0_stage0 = 9'd16;
parameter    ap_ST_fsm_pp0_stage1 = 9'd32;
parameter    ap_ST_fsm_pp0_stage2 = 9'd64;
parameter    ap_ST_fsm_pp0_stage3 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
input  [8:0] col_packets_cast_loc_dout;
input   col_packets_cast_loc_empty_n;
output   col_packets_cast_loc_read;
input  [8:0] p_lshr_f_cast_loc_dout;
input   p_lshr_f_cast_loc_empty_n;
output   p_lshr_f_cast_loc_read;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
input  [7:0] g_img_1_data_stream_0_V_dout;
input   g_img_1_data_stream_0_V_empty_n;
output   g_img_1_data_stream_0_V_read;
output  [0:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_packets_cast_loc_read;
reg p_lshr_f_cast_loc_read;
reg g_img_1_data_stream_0_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [31:0] out_stream_data_V_1_payload_A;
reg   [31:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
reg   [0:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg   [0:0] out_stream_user_V_1_payload_A;
reg   [0:0] out_stream_user_V_1_payload_B;
reg    out_stream_user_V_1_sel_rd;
reg    out_stream_user_V_1_sel_wr;
wire    out_stream_user_V_1_sel;
wire    out_stream_user_V_1_load_A;
wire    out_stream_user_V_1_load_B;
reg   [1:0] out_stream_user_V_1_state;
wire    out_stream_user_V_1_state_cmp_full;
reg   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg   [0:0] out_stream_last_V_1_payload_A;
reg   [0:0] out_stream_last_V_1_payload_B;
reg    out_stream_last_V_1_sel_rd;
reg    out_stream_last_V_1_sel_wr;
wire    out_stream_last_V_1_sel;
wire    out_stream_last_V_1_load_A;
wire    out_stream_last_V_1_load_B;
reg   [1:0] out_stream_last_V_1_state;
wire    out_stream_last_V_1_state_cmp_full;
reg    col_packets_cast_loc_blk_n;
reg    p_lshr_f_cast_loc_blk_n;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_381;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_381;
reg    g_img_1_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [19:0] indvar_flatten_reg_159;
reg   [10:0] r1_i_i_reg_170;
reg   [8:0] p_1_rec_i_i_reg_181;
reg   [8:0] col_packets_cast_loc_1_reg_339;
reg    ap_block_state1;
reg   [8:0] p_lshr_f_cast_loc_rea_reg_344;
wire   [10:0] tmp_fu_192_p1;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_26_i_i_fu_206_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] tmp_27_i_i_fu_211_p2;
reg   [9:0] tmp_27_i_i_reg_371;
wire   [19:0] grp_fu_333_p2;
reg   [19:0] bound_reg_376;
wire   [0:0] exitcond_flatten_fu_217_p2;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next_fu_222_p2;
reg   [19:0] indvar_flatten_next_reg_385;
wire   [0:0] exitcond1_i_i8_fu_228_p2;
reg   [0:0] exitcond1_i_i8_reg_390;
wire   [8:0] p_1_rec_i_i_mid2_fu_233_p3;
reg   [8:0] p_1_rec_i_i_mid2_reg_395;
wire   [0:0] tmp_43_i_i_mid1_fu_247_p2;
reg   [0:0] tmp_43_i_i_mid1_reg_400;
wire   [0:0] tmp_43_i_i4_fu_252_p2;
reg   [0:0] tmp_43_i_i4_reg_405;
wire   [10:0] tmp_79_mid2_v_fu_257_p3;
reg   [10:0] tmp_79_mid2_v_reg_410;
wire   [0:0] out_stream_user_V_tm_fu_297_p2;
reg   [0:0] out_stream_user_V_tm_reg_415;
wire   [0:0] tmp_55_i_i_fu_303_p2;
reg   [0:0] tmp_55_i_i_reg_420;
reg   [7:0] tmp_2_reg_425;
reg    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] out_stream_last_V_tm_fu_313_p2;
reg   [0:0] out_stream_last_V_tm_reg_430;
reg   [7:0] tmp_3_reg_435;
reg    ap_block_state7_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [7:0] tmp_5_reg_440;
reg    ap_block_state8_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [8:0] c_fu_318_p2;
reg   [8:0] c_reg_445;
wire   [31:0] p_Result_s_fu_323_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [19:0] ap_phi_mux_indvar_flatten_phi_fu_163_p4;
reg   [10:0] ap_phi_mux_r1_i_i_phi_fu_174_p4;
reg   [8:0] ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [9:0] extLd_fu_203_p1;
wire   [10:0] r3_fu_241_p2;
wire   [8:0] tmp_1_fu_265_p1;
wire   [1:0] tmp_4_fu_279_p4;
wire   [8:0] tmp_s_fu_273_p2;
wire   [10:0] tmp_53_i_i_fu_289_p3;
wire   [9:0] c_cast_i_i_mid2_cast_fu_269_p1;
wire   [0:0] tmp_43_i_i_mid2_fu_308_p3;
wire   [8:0] grp_fu_333_p0;
wire   [10:0] grp_fu_333_p1;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [19:0] grp_fu_333_p00;
wire   [19:0] grp_fu_333_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_sel_wr = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_sel_wr = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

filter2D_hls_5_mulbW #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
filter2D_hls_5_mulbW_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_out == 1'b1) & (out_stream_data_V_1_vld_out == 1'b1))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_in == 1'b1) & (out_stream_data_V_1_vld_in == 1'b1))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)) & ~((out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)) & (out_stream_data_V_1_state == 2'd3)) | ((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b1)) | ((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_out == 1'b1) & (out_stream_last_V_1_vld_out == 1'b1))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_in == 1'b1) & (out_stream_last_V_1_vld_in == 1'b1))) begin
            out_stream_last_V_1_sel_wr <= ~out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)) & ~((out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)) & (out_stream_last_V_1_state == 2'd3)) | ((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b1)) | ((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_user_V_1_ack_out == 1'b1) & (out_stream_user_V_1_vld_out == 1'b1))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_user_V_1_ack_in == 1'b1) & (out_stream_user_V_1_vld_in == 1'b1))) begin
            out_stream_user_V_1_sel_wr <= ~out_stream_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)) & ~((out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)) & (out_stream_user_V_1_state == 2'd3)) | ((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b1)) | ((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_159 <= indvar_flatten_next_reg_385;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_159 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_1_rec_i_i_reg_181 <= c_reg_445;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_1_rec_i_i_reg_181 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r1_i_i_reg_170 <= tmp_79_mid2_v_reg_410;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r1_i_i_reg_170 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_381 <= exitcond_flatten_reg_381;
        exitcond_flatten_reg_381 <= exitcond_flatten_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_376 <= grp_fu_333_p2;
        tmp_27_i_i_reg_371 <= tmp_27_i_i_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_reg_445 <= c_fu_318_p2;
        tmp_5_reg_440 <= g_img_1_data_stream_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_lshr_f_cast_loc_empty_n == 1'b0) | (col_packets_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_packets_cast_loc_1_reg_339 <= col_packets_cast_loc_dout;
        p_lshr_f_cast_loc_rea_reg_344 <= p_lshr_f_cast_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_217_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_i_i8_reg_390 <= exitcond1_i_i8_fu_228_p2;
        out_stream_user_V_tm_reg_415 <= out_stream_user_V_tm_fu_297_p2;
        p_1_rec_i_i_mid2_reg_395 <= p_1_rec_i_i_mid2_fu_233_p3;
        tmp_43_i_i4_reg_405 <= tmp_43_i_i4_fu_252_p2;
        tmp_43_i_i_mid1_reg_400 <= tmp_43_i_i_mid1_fu_247_p2;
        tmp_55_i_i_reg_420 <= tmp_55_i_i_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_385 <= indvar_flatten_next_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_A == 1'b1)) begin
        out_stream_data_V_1_payload_A <= p_Result_s_fu_323_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_B == 1'b1)) begin
        out_stream_data_V_1_payload_B <= p_Result_s_fu_323_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_A == 1'b1)) begin
        out_stream_last_V_1_payload_A <= out_stream_last_V_tm_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_B == 1'b1)) begin
        out_stream_last_V_1_payload_B <= out_stream_last_V_tm_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_stream_last_V_tm_reg_430 <= out_stream_last_V_tm_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_user_V_1_load_A == 1'b1)) begin
        out_stream_user_V_1_payload_A <= out_stream_user_V_tm_reg_415;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_user_V_1_load_B == 1'b1)) begin
        out_stream_user_V_1_payload_B <= out_stream_user_V_tm_reg_415;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_2_reg_425 <= g_img_1_data_stream_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_3_reg_435 <= g_img_1_data_stream_0_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_217_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_79_mid2_v_reg_410 <= tmp_79_mid2_v_fu_257_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_217_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_163_p4 = indvar_flatten_next_reg_385;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_163_p4 = indvar_flatten_reg_159;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 = c_reg_445;
    end else begin
        ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 = p_1_rec_i_i_reg_181;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_r1_i_i_phi_fu_174_p4 = tmp_79_mid2_v_reg_410;
    end else begin
        ap_phi_mux_r1_i_i_phi_fu_174_p4 = r1_i_i_reg_170;
    end
end

always @ (*) begin
    if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_packets_cast_loc_blk_n = col_packets_cast_loc_empty_n;
    end else begin
        col_packets_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_lshr_f_cast_loc_empty_n == 1'b0) | (col_packets_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_packets_cast_loc_read = 1'b1;
    end else begin
        col_packets_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_img_1_data_stream_0_V_blk_n = g_img_1_data_stream_0_V_empty_n;
    end else begin
        g_img_1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        g_img_1_data_stream_0_V_read = 1'b1;
    end else begin
        g_img_1_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter1_exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_data_V_1_sel == 1'b1)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_last_V_1_sel == 1'b1)) begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B;
    end else begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_user_V_1_sel == 1'b1)) begin
        out_stream_user_V_1_data_out = out_stream_user_V_1_payload_B;
    end else begin
        out_stream_user_V_1_data_out = out_stream_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_381 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_lshr_f_cast_loc_blk_n = p_lshr_f_cast_loc_empty_n;
    end else begin
        p_lshr_f_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_lshr_f_cast_loc_empty_n == 1'b0) | (col_packets_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_lshr_f_cast_loc_read = 1'b1;
    end else begin
        p_lshr_f_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_lshr_f_cast_loc_empty_n == 1'b0) | (col_packets_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_217_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond_flatten_fu_217_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((p_lshr_f_cast_loc_empty_n == 1'b0) | (col_packets_cast_loc_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((ap_reg_pp0_iter1_exitcond_flatten_reg_381 == 1'd0) & (out_stream_last_V_1_ack_in == 1'b0));
end

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11 = ((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage2_iter0 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage3_iter0 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((exitcond_flatten_reg_381 == 1'd0) & (out_stream_last_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((exitcond_flatten_reg_381 == 1'd0) & (g_img_1_data_stream_0_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_cast_i_i_mid2_cast_fu_269_p1 = p_1_rec_i_i_mid2_fu_233_p3;

assign c_fu_318_p2 = (9'd1 + p_1_rec_i_i_mid2_reg_395);

assign exitcond1_i_i8_fu_228_p2 = ((ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4 == p_lshr_f_cast_loc_rea_reg_344) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_217_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_163_p4 == bound_reg_376) ? 1'b1 : 1'b0);

assign extLd_fu_203_p1 = col_packets_cast_loc_1_reg_339;

assign grp_fu_333_p0 = grp_fu_333_p00;

assign grp_fu_333_p00 = p_lshr_f_cast_loc_rea_reg_344;

assign grp_fu_333_p1 = grp_fu_333_p10;

assign grp_fu_333_p10 = tmp_fu_192_p1;

assign indvar_flatten_next_fu_222_p2 = (ap_phi_mux_indvar_flatten_phi_fu_163_p4 + 20'd1);

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_last_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_state_cmp_full & out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full & ~out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_load_B = (out_stream_last_V_1_state_cmp_full & out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_state_cmp_full = ((out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_last_V_tm_fu_313_p2 = (tmp_55_i_i_reg_420 & tmp_43_i_i_mid2_fu_308_p3);

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_load_A = (out_stream_user_V_1_state_cmp_full & ~out_stream_user_V_1_sel_wr);

assign out_stream_user_V_1_load_B = (out_stream_user_V_1_state_cmp_full & out_stream_user_V_1_sel_wr);

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_state_cmp_full = ((out_stream_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

assign out_stream_user_V_tm_fu_297_p2 = ((tmp_53_i_i_fu_289_p3 == 11'd0) ? 1'b1 : 1'b0);

assign p_1_rec_i_i_mid2_fu_233_p3 = ((exitcond1_i_i8_fu_228_p2[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_p_1_rec_i_i_phi_fu_185_p4);

assign p_Result_s_fu_323_p5 = {{{{g_img_1_data_stream_0_V_dout}, {tmp_5_reg_440}}, {tmp_3_reg_435}}, {tmp_2_reg_425}};

assign r3_fu_241_p2 = (11'd1 + ap_phi_mux_r1_i_i_phi_fu_174_p4);

assign tmp_1_fu_265_p1 = tmp_79_mid2_v_fu_257_p3[8:0];

assign tmp_26_i_i_fu_206_p2 = ($signed(11'd2047) + $signed(tmp_fu_192_p1));

assign tmp_27_i_i_fu_211_p2 = ($signed(10'd1023) + $signed(extLd_fu_203_p1));

assign tmp_43_i_i4_fu_252_p2 = ((ap_phi_mux_r1_i_i_phi_fu_174_p4 == tmp_26_i_i_fu_206_p2) ? 1'b1 : 1'b0);

assign tmp_43_i_i_mid1_fu_247_p2 = ((r3_fu_241_p2 == tmp_26_i_i_fu_206_p2) ? 1'b1 : 1'b0);

assign tmp_43_i_i_mid2_fu_308_p3 = ((exitcond1_i_i8_reg_390[0:0] === 1'b1) ? tmp_43_i_i_mid1_reg_400 : tmp_43_i_i4_reg_405);

assign tmp_4_fu_279_p4 = {{tmp_79_mid2_v_fu_257_p3[10:9]}};

assign tmp_53_i_i_fu_289_p3 = {{tmp_4_fu_279_p4}, {tmp_s_fu_273_p2}};

assign tmp_55_i_i_fu_303_p2 = ((c_cast_i_i_mid2_cast_fu_269_p1 == tmp_27_i_i_reg_371) ? 1'b1 : 1'b0);

assign tmp_79_mid2_v_fu_257_p3 = ((exitcond1_i_i8_fu_228_p2[0:0] === 1'b1) ? r3_fu_241_p2 : ap_phi_mux_r1_i_i_phi_fu_174_p4);

assign tmp_fu_192_p1 = rows[10:0];

assign tmp_s_fu_273_p2 = (tmp_1_fu_265_p1 | p_1_rec_i_i_mid2_fu_233_p3);

endmodule //Loop_2_proc
