// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        par_V_address0,
        par_V_ce0,
        par_V_q0,
        kernel_val_0_V_0_out_din,
        kernel_val_0_V_0_out_full_n,
        kernel_val_0_V_0_out_write,
        kernel_val_0_V_1_out_din,
        kernel_val_0_V_1_out_full_n,
        kernel_val_0_V_1_out_write,
        kernel_val_0_V_2_out_din,
        kernel_val_0_V_2_out_full_n,
        kernel_val_0_V_2_out_write,
        kernel_val_0_V_3_out_din,
        kernel_val_0_V_3_out_full_n,
        kernel_val_0_V_3_out_write,
        kernel_val_0_V_4_out_din,
        kernel_val_0_V_4_out_full_n,
        kernel_val_0_V_4_out_write,
        kernel_val_1_V_0_out_din,
        kernel_val_1_V_0_out_full_n,
        kernel_val_1_V_0_out_write,
        kernel_val_1_V_1_out_din,
        kernel_val_1_V_1_out_full_n,
        kernel_val_1_V_1_out_write,
        kernel_val_1_V_2_out_din,
        kernel_val_1_V_2_out_full_n,
        kernel_val_1_V_2_out_write,
        kernel_val_1_V_3_out_din,
        kernel_val_1_V_3_out_full_n,
        kernel_val_1_V_3_out_write,
        kernel_val_1_V_4_out_din,
        kernel_val_1_V_4_out_full_n,
        kernel_val_1_V_4_out_write,
        kernel_val_2_V_0_out_din,
        kernel_val_2_V_0_out_full_n,
        kernel_val_2_V_0_out_write,
        kernel_val_2_V_1_out_din,
        kernel_val_2_V_1_out_full_n,
        kernel_val_2_V_1_out_write,
        kernel_val_2_V_2_out_din,
        kernel_val_2_V_2_out_full_n,
        kernel_val_2_V_2_out_write,
        kernel_val_2_V_3_out_din,
        kernel_val_2_V_3_out_full_n,
        kernel_val_2_V_3_out_write,
        kernel_val_2_V_4_out_din,
        kernel_val_2_V_4_out_full_n,
        kernel_val_2_V_4_out_write,
        kernel_val_3_V_0_out_din,
        kernel_val_3_V_0_out_full_n,
        kernel_val_3_V_0_out_write,
        kernel_val_3_V_1_out_din,
        kernel_val_3_V_1_out_full_n,
        kernel_val_3_V_1_out_write,
        kernel_val_3_V_2_out_din,
        kernel_val_3_V_2_out_full_n,
        kernel_val_3_V_2_out_write,
        kernel_val_3_V_3_out_din,
        kernel_val_3_V_3_out_full_n,
        kernel_val_3_V_3_out_write,
        kernel_val_3_V_4_out_din,
        kernel_val_3_V_4_out_full_n,
        kernel_val_3_V_4_out_write,
        kernel_val_4_V_0_out_din,
        kernel_val_4_V_0_out_full_n,
        kernel_val_4_V_0_out_write,
        kernel_val_4_V_1_out_din,
        kernel_val_4_V_1_out_full_n,
        kernel_val_4_V_1_out_write,
        kernel_val_4_V_2_out_din,
        kernel_val_4_V_2_out_full_n,
        kernel_val_4_V_2_out_write,
        kernel_val_4_V_3_out_din,
        kernel_val_4_V_3_out_full_n,
        kernel_val_4_V_3_out_write,
        kernel_val_4_V_4_out_din,
        kernel_val_4_V_4_out_full_n,
        kernel_val_4_V_4_out_write
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] par_V_address0;
output   par_V_ce0;
input  [7:0] par_V_q0;
output  [7:0] kernel_val_0_V_0_out_din;
input   kernel_val_0_V_0_out_full_n;
output   kernel_val_0_V_0_out_write;
output  [7:0] kernel_val_0_V_1_out_din;
input   kernel_val_0_V_1_out_full_n;
output   kernel_val_0_V_1_out_write;
output  [7:0] kernel_val_0_V_2_out_din;
input   kernel_val_0_V_2_out_full_n;
output   kernel_val_0_V_2_out_write;
output  [7:0] kernel_val_0_V_3_out_din;
input   kernel_val_0_V_3_out_full_n;
output   kernel_val_0_V_3_out_write;
output  [7:0] kernel_val_0_V_4_out_din;
input   kernel_val_0_V_4_out_full_n;
output   kernel_val_0_V_4_out_write;
output  [7:0] kernel_val_1_V_0_out_din;
input   kernel_val_1_V_0_out_full_n;
output   kernel_val_1_V_0_out_write;
output  [7:0] kernel_val_1_V_1_out_din;
input   kernel_val_1_V_1_out_full_n;
output   kernel_val_1_V_1_out_write;
output  [7:0] kernel_val_1_V_2_out_din;
input   kernel_val_1_V_2_out_full_n;
output   kernel_val_1_V_2_out_write;
output  [7:0] kernel_val_1_V_3_out_din;
input   kernel_val_1_V_3_out_full_n;
output   kernel_val_1_V_3_out_write;
output  [7:0] kernel_val_1_V_4_out_din;
input   kernel_val_1_V_4_out_full_n;
output   kernel_val_1_V_4_out_write;
output  [7:0] kernel_val_2_V_0_out_din;
input   kernel_val_2_V_0_out_full_n;
output   kernel_val_2_V_0_out_write;
output  [7:0] kernel_val_2_V_1_out_din;
input   kernel_val_2_V_1_out_full_n;
output   kernel_val_2_V_1_out_write;
output  [7:0] kernel_val_2_V_2_out_din;
input   kernel_val_2_V_2_out_full_n;
output   kernel_val_2_V_2_out_write;
output  [7:0] kernel_val_2_V_3_out_din;
input   kernel_val_2_V_3_out_full_n;
output   kernel_val_2_V_3_out_write;
output  [7:0] kernel_val_2_V_4_out_din;
input   kernel_val_2_V_4_out_full_n;
output   kernel_val_2_V_4_out_write;
output  [7:0] kernel_val_3_V_0_out_din;
input   kernel_val_3_V_0_out_full_n;
output   kernel_val_3_V_0_out_write;
output  [7:0] kernel_val_3_V_1_out_din;
input   kernel_val_3_V_1_out_full_n;
output   kernel_val_3_V_1_out_write;
output  [7:0] kernel_val_3_V_2_out_din;
input   kernel_val_3_V_2_out_full_n;
output   kernel_val_3_V_2_out_write;
output  [7:0] kernel_val_3_V_3_out_din;
input   kernel_val_3_V_3_out_full_n;
output   kernel_val_3_V_3_out_write;
output  [7:0] kernel_val_3_V_4_out_din;
input   kernel_val_3_V_4_out_full_n;
output   kernel_val_3_V_4_out_write;
output  [7:0] kernel_val_4_V_0_out_din;
input   kernel_val_4_V_0_out_full_n;
output   kernel_val_4_V_0_out_write;
output  [7:0] kernel_val_4_V_1_out_din;
input   kernel_val_4_V_1_out_full_n;
output   kernel_val_4_V_1_out_write;
output  [7:0] kernel_val_4_V_2_out_din;
input   kernel_val_4_V_2_out_full_n;
output   kernel_val_4_V_2_out_write;
output  [7:0] kernel_val_4_V_3_out_din;
input   kernel_val_4_V_3_out_full_n;
output   kernel_val_4_V_3_out_write;
output  [7:0] kernel_val_4_V_4_out_din;
input   kernel_val_4_V_4_out_full_n;
output   kernel_val_4_V_4_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] par_V_address0;
reg par_V_ce0;
reg kernel_val_0_V_0_out_write;
reg kernel_val_0_V_1_out_write;
reg kernel_val_0_V_2_out_write;
reg kernel_val_0_V_3_out_write;
reg kernel_val_0_V_4_out_write;
reg kernel_val_1_V_0_out_write;
reg kernel_val_1_V_1_out_write;
reg kernel_val_1_V_2_out_write;
reg kernel_val_1_V_3_out_write;
reg kernel_val_1_V_4_out_write;
reg kernel_val_2_V_0_out_write;
reg kernel_val_2_V_1_out_write;
reg kernel_val_2_V_2_out_write;
reg kernel_val_2_V_3_out_write;
reg kernel_val_2_V_4_out_write;
reg kernel_val_3_V_0_out_write;
reg kernel_val_3_V_1_out_write;
reg kernel_val_3_V_2_out_write;
reg kernel_val_3_V_3_out_write;
reg kernel_val_3_V_4_out_write;
reg kernel_val_4_V_0_out_write;
reg kernel_val_4_V_1_out_write;
reg kernel_val_4_V_2_out_write;
reg kernel_val_4_V_3_out_write;
reg kernel_val_4_V_4_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    kernel_val_0_V_0_out_blk_n;
wire    ap_CS_fsm_state26;
reg    kernel_val_0_V_1_out_blk_n;
reg    kernel_val_0_V_2_out_blk_n;
reg    kernel_val_0_V_3_out_blk_n;
reg    kernel_val_0_V_4_out_blk_n;
reg    kernel_val_1_V_0_out_blk_n;
reg    kernel_val_1_V_1_out_blk_n;
reg    kernel_val_1_V_2_out_blk_n;
reg    kernel_val_1_V_3_out_blk_n;
reg    kernel_val_1_V_4_out_blk_n;
reg    kernel_val_2_V_0_out_blk_n;
reg    kernel_val_2_V_1_out_blk_n;
reg    kernel_val_2_V_2_out_blk_n;
reg    kernel_val_2_V_3_out_blk_n;
reg    kernel_val_2_V_4_out_blk_n;
reg    kernel_val_3_V_0_out_blk_n;
reg    kernel_val_3_V_1_out_blk_n;
reg    kernel_val_3_V_2_out_blk_n;
reg    kernel_val_3_V_3_out_blk_n;
reg    kernel_val_3_V_4_out_blk_n;
reg    kernel_val_4_V_0_out_blk_n;
reg    kernel_val_4_V_1_out_blk_n;
reg    kernel_val_4_V_2_out_blk_n;
reg    kernel_val_4_V_3_out_blk_n;
reg    kernel_val_4_V_4_out_blk_n;
reg    ap_block_state1;
reg   [7:0] kernel_val_0_V_0_reg_832;
wire    ap_CS_fsm_state2;
reg   [7:0] kernel_val_0_V_1_reg_842;
wire    ap_CS_fsm_state3;
reg   [7:0] kernel_val_0_V_2_reg_852;
wire    ap_CS_fsm_state4;
reg   [7:0] kernel_val_0_V_3_reg_862;
wire    ap_CS_fsm_state5;
reg   [7:0] kernel_val_0_V_4_reg_872;
wire    ap_CS_fsm_state6;
reg   [7:0] kernel_val_1_V_0_reg_882;
wire    ap_CS_fsm_state7;
reg   [7:0] kernel_val_1_V_1_reg_892;
wire    ap_CS_fsm_state8;
reg   [7:0] kernel_val_1_V_2_reg_902;
wire    ap_CS_fsm_state9;
reg   [7:0] kernel_val_1_V_3_reg_912;
wire    ap_CS_fsm_state10;
reg   [7:0] kernel_val_1_V_4_reg_922;
wire    ap_CS_fsm_state11;
reg   [7:0] kernel_val_2_V_0_reg_932;
wire    ap_CS_fsm_state12;
reg   [7:0] kernel_val_2_V_1_reg_942;
wire    ap_CS_fsm_state13;
reg   [7:0] kernel_val_2_V_2_reg_952;
wire    ap_CS_fsm_state14;
reg   [7:0] kernel_val_2_V_3_reg_962;
wire    ap_CS_fsm_state15;
reg   [7:0] kernel_val_2_V_4_reg_972;
wire    ap_CS_fsm_state16;
reg   [7:0] kernel_val_3_V_0_reg_982;
wire    ap_CS_fsm_state17;
reg   [7:0] kernel_val_3_V_1_reg_992;
wire    ap_CS_fsm_state18;
reg   [7:0] kernel_val_3_V_2_reg_1002;
wire    ap_CS_fsm_state19;
reg   [7:0] kernel_val_3_V_3_reg_1012;
wire    ap_CS_fsm_state20;
reg   [7:0] kernel_val_3_V_4_reg_1022;
wire    ap_CS_fsm_state21;
reg   [7:0] kernel_val_4_V_0_reg_1032;
wire    ap_CS_fsm_state22;
reg   [7:0] kernel_val_4_V_1_reg_1042;
wire    ap_CS_fsm_state23;
reg   [7:0] kernel_val_4_V_2_reg_1052;
wire    ap_CS_fsm_state24;
reg   [7:0] kernel_val_4_V_3_reg_1062;
wire    ap_CS_fsm_state25;
reg    ap_block_state26;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 26'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_val_0_V_0_reg_832 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_val_0_V_1_reg_842 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_val_0_V_2_reg_852 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_val_0_V_3_reg_862 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_val_0_V_4_reg_872 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_val_1_V_0_reg_882 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_val_1_V_1_reg_892 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_val_1_V_2_reg_902 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_val_1_V_3_reg_912 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        kernel_val_1_V_4_reg_922 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        kernel_val_2_V_0_reg_932 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        kernel_val_2_V_1_reg_942 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        kernel_val_2_V_2_reg_952 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        kernel_val_2_V_3_reg_962 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        kernel_val_2_V_4_reg_972 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        kernel_val_3_V_0_reg_982 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        kernel_val_3_V_1_reg_992 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        kernel_val_3_V_2_reg_1002 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        kernel_val_3_V_3_reg_1012 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        kernel_val_3_V_4_reg_1022 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        kernel_val_4_V_0_reg_1032 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        kernel_val_4_V_1_reg_1042 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        kernel_val_4_V_2_reg_1052 <= par_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        kernel_val_4_V_3_reg_1062 <= par_V_q0;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_0_V_0_out_blk_n = kernel_val_0_V_0_out_full_n;
    end else begin
        kernel_val_0_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_0_V_0_out_write = 1'b1;
    end else begin
        kernel_val_0_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_0_V_1_out_blk_n = kernel_val_0_V_1_out_full_n;
    end else begin
        kernel_val_0_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_0_V_1_out_write = 1'b1;
    end else begin
        kernel_val_0_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_0_V_2_out_blk_n = kernel_val_0_V_2_out_full_n;
    end else begin
        kernel_val_0_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_0_V_2_out_write = 1'b1;
    end else begin
        kernel_val_0_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_0_V_3_out_blk_n = kernel_val_0_V_3_out_full_n;
    end else begin
        kernel_val_0_V_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_0_V_3_out_write = 1'b1;
    end else begin
        kernel_val_0_V_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_0_V_4_out_blk_n = kernel_val_0_V_4_out_full_n;
    end else begin
        kernel_val_0_V_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_0_V_4_out_write = 1'b1;
    end else begin
        kernel_val_0_V_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_1_V_0_out_blk_n = kernel_val_1_V_0_out_full_n;
    end else begin
        kernel_val_1_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_1_V_0_out_write = 1'b1;
    end else begin
        kernel_val_1_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_1_V_1_out_blk_n = kernel_val_1_V_1_out_full_n;
    end else begin
        kernel_val_1_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_1_V_1_out_write = 1'b1;
    end else begin
        kernel_val_1_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_1_V_2_out_blk_n = kernel_val_1_V_2_out_full_n;
    end else begin
        kernel_val_1_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_1_V_2_out_write = 1'b1;
    end else begin
        kernel_val_1_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_1_V_3_out_blk_n = kernel_val_1_V_3_out_full_n;
    end else begin
        kernel_val_1_V_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_1_V_3_out_write = 1'b1;
    end else begin
        kernel_val_1_V_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_1_V_4_out_blk_n = kernel_val_1_V_4_out_full_n;
    end else begin
        kernel_val_1_V_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_1_V_4_out_write = 1'b1;
    end else begin
        kernel_val_1_V_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_2_V_0_out_blk_n = kernel_val_2_V_0_out_full_n;
    end else begin
        kernel_val_2_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_2_V_0_out_write = 1'b1;
    end else begin
        kernel_val_2_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_2_V_1_out_blk_n = kernel_val_2_V_1_out_full_n;
    end else begin
        kernel_val_2_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_2_V_1_out_write = 1'b1;
    end else begin
        kernel_val_2_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_2_V_2_out_blk_n = kernel_val_2_V_2_out_full_n;
    end else begin
        kernel_val_2_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_2_V_2_out_write = 1'b1;
    end else begin
        kernel_val_2_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_2_V_3_out_blk_n = kernel_val_2_V_3_out_full_n;
    end else begin
        kernel_val_2_V_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_2_V_3_out_write = 1'b1;
    end else begin
        kernel_val_2_V_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_2_V_4_out_blk_n = kernel_val_2_V_4_out_full_n;
    end else begin
        kernel_val_2_V_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_2_V_4_out_write = 1'b1;
    end else begin
        kernel_val_2_V_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_3_V_0_out_blk_n = kernel_val_3_V_0_out_full_n;
    end else begin
        kernel_val_3_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_3_V_0_out_write = 1'b1;
    end else begin
        kernel_val_3_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_3_V_1_out_blk_n = kernel_val_3_V_1_out_full_n;
    end else begin
        kernel_val_3_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_3_V_1_out_write = 1'b1;
    end else begin
        kernel_val_3_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_3_V_2_out_blk_n = kernel_val_3_V_2_out_full_n;
    end else begin
        kernel_val_3_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_3_V_2_out_write = 1'b1;
    end else begin
        kernel_val_3_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_3_V_3_out_blk_n = kernel_val_3_V_3_out_full_n;
    end else begin
        kernel_val_3_V_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_3_V_3_out_write = 1'b1;
    end else begin
        kernel_val_3_V_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_3_V_4_out_blk_n = kernel_val_3_V_4_out_full_n;
    end else begin
        kernel_val_3_V_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_3_V_4_out_write = 1'b1;
    end else begin
        kernel_val_3_V_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_4_V_0_out_blk_n = kernel_val_4_V_0_out_full_n;
    end else begin
        kernel_val_4_V_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_4_V_0_out_write = 1'b1;
    end else begin
        kernel_val_4_V_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_4_V_1_out_blk_n = kernel_val_4_V_1_out_full_n;
    end else begin
        kernel_val_4_V_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_4_V_1_out_write = 1'b1;
    end else begin
        kernel_val_4_V_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_4_V_2_out_blk_n = kernel_val_4_V_2_out_full_n;
    end else begin
        kernel_val_4_V_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_4_V_2_out_write = 1'b1;
    end else begin
        kernel_val_4_V_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_4_V_3_out_blk_n = kernel_val_4_V_3_out_full_n;
    end else begin
        kernel_val_4_V_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_4_V_3_out_write = 1'b1;
    end else begin
        kernel_val_4_V_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        kernel_val_4_V_4_out_blk_n = kernel_val_4_V_4_out_full_n;
    end else begin
        kernel_val_4_V_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
        kernel_val_4_V_4_out_write = 1'b1;
    end else begin
        kernel_val_4_V_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        par_V_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        par_V_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        par_V_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        par_V_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        par_V_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        par_V_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        par_V_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        par_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        par_V_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        par_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        par_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        par_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        par_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        par_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        par_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        par_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        par_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        par_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        par_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        par_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        par_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        par_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        par_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        par_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        par_V_address0 = 64'd0;
    end else begin
        par_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        par_V_ce0 = 1'b1;
    end else begin
        par_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if ((~((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state26 = ((kernel_val_2_V_1_out_full_n == 1'b0) | (kernel_val_2_V_0_out_full_n == 1'b0) | (kernel_val_1_V_4_out_full_n == 1'b0) | (kernel_val_1_V_3_out_full_n == 1'b0) | (kernel_val_1_V_2_out_full_n == 1'b0) | (kernel_val_1_V_1_out_full_n == 1'b0) | (kernel_val_1_V_0_out_full_n == 1'b0) | (kernel_val_0_V_4_out_full_n == 1'b0) | (kernel_val_0_V_3_out_full_n == 1'b0) | (kernel_val_0_V_2_out_full_n == 1'b0) | (kernel_val_0_V_1_out_full_n == 1'b0) | (kernel_val_0_V_0_out_full_n == 1'b0) | (kernel_val_4_V_4_out_full_n == 1'b0) | (kernel_val_4_V_3_out_full_n == 1'b0) | (kernel_val_4_V_2_out_full_n == 1'b0) | (kernel_val_4_V_1_out_full_n == 1'b0) | (kernel_val_4_V_0_out_full_n == 1'b0) | (kernel_val_3_V_4_out_full_n == 1'b0) | (kernel_val_3_V_3_out_full_n == 1'b0) | (kernel_val_3_V_2_out_full_n == 1'b0) | (kernel_val_3_V_1_out_full_n == 1'b0) | (kernel_val_3_V_0_out_full_n == 1'b0) | (kernel_val_2_V_4_out_full_n == 1'b0) | (kernel_val_2_V_3_out_full_n == 1'b0) | (kernel_val_2_V_2_out_full_n == 1'b0));
end

assign kernel_val_0_V_0_out_din = kernel_val_0_V_0_reg_832;

assign kernel_val_0_V_1_out_din = kernel_val_0_V_1_reg_842;

assign kernel_val_0_V_2_out_din = kernel_val_0_V_2_reg_852;

assign kernel_val_0_V_3_out_din = kernel_val_0_V_3_reg_862;

assign kernel_val_0_V_4_out_din = kernel_val_0_V_4_reg_872;

assign kernel_val_1_V_0_out_din = kernel_val_1_V_0_reg_882;

assign kernel_val_1_V_1_out_din = kernel_val_1_V_1_reg_892;

assign kernel_val_1_V_2_out_din = kernel_val_1_V_2_reg_902;

assign kernel_val_1_V_3_out_din = kernel_val_1_V_3_reg_912;

assign kernel_val_1_V_4_out_din = kernel_val_1_V_4_reg_922;

assign kernel_val_2_V_0_out_din = kernel_val_2_V_0_reg_932;

assign kernel_val_2_V_1_out_din = kernel_val_2_V_1_reg_942;

assign kernel_val_2_V_2_out_din = kernel_val_2_V_2_reg_952;

assign kernel_val_2_V_3_out_din = kernel_val_2_V_3_reg_962;

assign kernel_val_2_V_4_out_din = kernel_val_2_V_4_reg_972;

assign kernel_val_3_V_0_out_din = kernel_val_3_V_0_reg_982;

assign kernel_val_3_V_1_out_din = kernel_val_3_V_1_reg_992;

assign kernel_val_3_V_2_out_din = kernel_val_3_V_2_reg_1002;

assign kernel_val_3_V_3_out_din = kernel_val_3_V_3_reg_1012;

assign kernel_val_3_V_4_out_din = kernel_val_3_V_4_reg_1022;

assign kernel_val_4_V_0_out_din = kernel_val_4_V_0_reg_1032;

assign kernel_val_4_V_1_out_din = kernel_val_4_V_1_reg_1042;

assign kernel_val_4_V_2_out_din = kernel_val_4_V_2_reg_1052;

assign kernel_val_4_V_3_out_din = kernel_val_4_V_3_reg_1062;

assign kernel_val_4_V_4_out_din = par_V_q0;

endmodule //Block_proc
