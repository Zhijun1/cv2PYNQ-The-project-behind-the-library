-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity move_hls is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    AXI_LITE_clk : IN STD_LOGIC;
    ap_rst_n_AXI_LITE_clk : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of move_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "move_hls,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=811,HLS_SYN_LUT=1513}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_rst_n_AXI_LITE_clk_inv : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_write : STD_LOGIC;
    signal Block_Mat_exit16542_U0_col_packets_cast_out_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_Mat_exit16542_U0_col_packets_cast_out_out_write : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_channel_done_packets_cast_loc_cha : STD_LOGIC;
    signal packets_cast_loc_cha_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_in_stream_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_g_img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_1_proc_U0_g_img_0_data_stream_0_V_write : STD_LOGIC;
    signal Loop_2_proc18_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc18_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc18_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc18_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc18_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc18_U0_g_img_0_data_stream_0_V_read : STD_LOGIC;
    signal Loop_2_proc18_U0_g_img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_2_proc18_U0_g_img_1_data_stream_0_V_write : STD_LOGIC;
    signal Loop_3_proc_U0_ap_start : STD_LOGIC;
    signal Loop_3_proc_U0_ap_done : STD_LOGIC;
    signal Loop_3_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_3_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_3_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_3_proc_U0_col_packets_cast_loc_read : STD_LOGIC;
    signal Loop_3_proc_U0_p_lshr_f_cast_loc_read : STD_LOGIC;
    signal Loop_3_proc_U0_out_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_3_proc_U0_out_stream_TVALID : STD_LOGIC;
    signal Loop_3_proc_U0_g_img_1_data_stream_0_V_read : STD_LOGIC;
    signal Loop_3_proc_U0_out_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_3_proc_U0_out_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal p_lshr_f_cast_loc_c_full_n : STD_LOGIC;
    signal p_lshr_f_cast_loc_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal p_lshr_f_cast_loc_c_empty_n : STD_LOGIC;
    signal col_packets_cast_loc_full_n : STD_LOGIC;
    signal col_packets_cast_loc_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal col_packets_cast_loc_empty_n : STD_LOGIC;
    signal packets_cast_loc_cha_dout : STD_LOGIC_VECTOR (19 downto 0);
    signal packets_cast_loc_cha_empty_n : STD_LOGIC;
    signal g_img_0_data_stream_s_full_n : STD_LOGIC;
    signal g_img_0_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal g_img_0_data_stream_s_empty_n : STD_LOGIC;
    signal g_img_1_data_stream_s_full_n : STD_LOGIC;
    signal g_img_1_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal g_img_1_data_stream_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit16542_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit16542_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit16542_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_Mat_exit16542_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit16542_U0_start_write : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal Loop_2_proc18_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc18_U0_start_write : STD_LOGIC;
    signal Loop_3_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_3_proc_U0_start_write : STD_LOGIC;

    component Block_Mat_exit16542_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        p_lshr_f_cast_out_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_lshr_f_cast_out_out_full_n : IN STD_LOGIC;
        p_lshr_f_cast_out_out_write : OUT STD_LOGIC;
        col_packets_cast_out_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        col_packets_cast_out_out_full_n : IN STD_LOGIC;
        col_packets_cast_out_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (19 downto 0);
        in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TVALID : IN STD_LOGIC;
        in_stream_TREADY : OUT STD_LOGIC;
        g_img_0_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        g_img_0_data_stream_0_V_full_n : IN STD_LOGIC;
        g_img_0_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component Loop_2_proc18 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        g_img_0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        g_img_0_data_stream_0_V_empty_n : IN STD_LOGIC;
        g_img_0_data_stream_0_V_read : OUT STD_LOGIC;
        g_img_1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        g_img_1_data_stream_0_V_full_n : IN STD_LOGIC;
        g_img_1_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component Loop_3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        col_packets_cast_loc_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        col_packets_cast_loc_empty_n : IN STD_LOGIC;
        col_packets_cast_loc_read : OUT STD_LOGIC;
        p_lshr_f_cast_loc_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_lshr_f_cast_loc_empty_n : IN STD_LOGIC;
        p_lshr_f_cast_loc_read : OUT STD_LOGIC;
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TVALID : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        g_img_1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        g_img_1_data_stream_0_V_empty_n : IN STD_LOGIC;
        g_img_1_data_stream_0_V_read : OUT STD_LOGIC;
        out_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w9_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w20_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (19 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (19 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component move_hls_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    move_hls_CONTROL_BUS_s_axi_U : component move_hls_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => AXI_LITE_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        clk => ap_clk,
        rst => ap_rst_n_AXI_LITE_clk_inv);

    Block_Mat_exit16542_U0 : component Block_Mat_exit16542_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit16542_U0_ap_start,
        ap_done => Block_Mat_exit16542_U0_ap_done,
        ap_continue => Block_Mat_exit16542_U0_ap_continue,
        ap_idle => Block_Mat_exit16542_U0_ap_idle,
        ap_ready => Block_Mat_exit16542_U0_ap_ready,
        rows => rows,
        cols => cols,
        p_lshr_f_cast_out_out_din => Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_din,
        p_lshr_f_cast_out_out_full_n => p_lshr_f_cast_loc_c_full_n,
        p_lshr_f_cast_out_out_write => Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_write,
        col_packets_cast_out_out_din => Block_Mat_exit16542_U0_col_packets_cast_out_out_din,
        col_packets_cast_out_out_full_n => col_packets_cast_loc_full_n,
        col_packets_cast_out_out_write => Block_Mat_exit16542_U0_col_packets_cast_out_out_write,
        ap_return => Block_Mat_exit16542_U0_ap_return);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        p_read => packets_cast_loc_cha_dout,
        in_stream_TDATA => in_stream_TDATA,
        in_stream_TVALID => in_stream_TVALID,
        in_stream_TREADY => Loop_1_proc_U0_in_stream_TREADY,
        g_img_0_data_stream_0_V_din => Loop_1_proc_U0_g_img_0_data_stream_0_V_din,
        g_img_0_data_stream_0_V_full_n => g_img_0_data_stream_s_full_n,
        g_img_0_data_stream_0_V_write => Loop_1_proc_U0_g_img_0_data_stream_0_V_write);

    Loop_2_proc18_U0 : component Loop_2_proc18
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc18_U0_ap_start,
        ap_done => Loop_2_proc18_U0_ap_done,
        ap_continue => Loop_2_proc18_U0_ap_continue,
        ap_idle => Loop_2_proc18_U0_ap_idle,
        ap_ready => Loop_2_proc18_U0_ap_ready,
        rows => rows,
        cols => cols,
        g_img_0_data_stream_0_V_dout => g_img_0_data_stream_s_dout,
        g_img_0_data_stream_0_V_empty_n => g_img_0_data_stream_s_empty_n,
        g_img_0_data_stream_0_V_read => Loop_2_proc18_U0_g_img_0_data_stream_0_V_read,
        g_img_1_data_stream_0_V_din => Loop_2_proc18_U0_g_img_1_data_stream_0_V_din,
        g_img_1_data_stream_0_V_full_n => g_img_1_data_stream_s_full_n,
        g_img_1_data_stream_0_V_write => Loop_2_proc18_U0_g_img_1_data_stream_0_V_write);

    Loop_3_proc_U0 : component Loop_3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_3_proc_U0_ap_start,
        ap_done => Loop_3_proc_U0_ap_done,
        ap_continue => Loop_3_proc_U0_ap_continue,
        ap_idle => Loop_3_proc_U0_ap_idle,
        ap_ready => Loop_3_proc_U0_ap_ready,
        rows => rows,
        col_packets_cast_loc_dout => col_packets_cast_loc_dout,
        col_packets_cast_loc_empty_n => col_packets_cast_loc_empty_n,
        col_packets_cast_loc_read => Loop_3_proc_U0_col_packets_cast_loc_read,
        p_lshr_f_cast_loc_dout => p_lshr_f_cast_loc_c_dout,
        p_lshr_f_cast_loc_empty_n => p_lshr_f_cast_loc_c_empty_n,
        p_lshr_f_cast_loc_read => Loop_3_proc_U0_p_lshr_f_cast_loc_read,
        out_stream_TDATA => Loop_3_proc_U0_out_stream_TDATA,
        out_stream_TVALID => Loop_3_proc_U0_out_stream_TVALID,
        out_stream_TREADY => out_stream_TREADY,
        g_img_1_data_stream_0_V_dout => g_img_1_data_stream_s_dout,
        g_img_1_data_stream_0_V_empty_n => g_img_1_data_stream_s_empty_n,
        g_img_1_data_stream_0_V_read => Loop_3_proc_U0_g_img_1_data_stream_0_V_read,
        out_stream_TUSER => Loop_3_proc_U0_out_stream_TUSER,
        out_stream_TLAST => Loop_3_proc_U0_out_stream_TLAST);

    p_lshr_f_cast_loc_c_U : component fifo_w9_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_din,
        if_full_n => p_lshr_f_cast_loc_c_full_n,
        if_write => Block_Mat_exit16542_U0_p_lshr_f_cast_out_out_write,
        if_dout => p_lshr_f_cast_loc_c_dout,
        if_empty_n => p_lshr_f_cast_loc_c_empty_n,
        if_read => Loop_3_proc_U0_p_lshr_f_cast_loc_read);

    col_packets_cast_loc_U : component fifo_w9_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit16542_U0_col_packets_cast_out_out_din,
        if_full_n => col_packets_cast_loc_full_n,
        if_write => Block_Mat_exit16542_U0_col_packets_cast_out_out_write,
        if_dout => col_packets_cast_loc_dout,
        if_empty_n => col_packets_cast_loc_empty_n,
        if_read => Loop_3_proc_U0_col_packets_cast_loc_read);

    packets_cast_loc_cha_U : component fifo_w20_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit16542_U0_ap_return,
        if_full_n => packets_cast_loc_cha_full_n,
        if_write => Block_Mat_exit16542_U0_ap_done,
        if_dout => packets_cast_loc_cha_dout,
        if_empty_n => packets_cast_loc_cha_empty_n,
        if_read => Loop_1_proc_U0_ap_ready);

    g_img_0_data_stream_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc_U0_g_img_0_data_stream_0_V_din,
        if_full_n => g_img_0_data_stream_s_full_n,
        if_write => Loop_1_proc_U0_g_img_0_data_stream_0_V_write,
        if_dout => g_img_0_data_stream_s_dout,
        if_empty_n => g_img_0_data_stream_s_empty_n,
        if_read => Loop_2_proc18_U0_g_img_0_data_stream_0_V_read);

    g_img_1_data_stream_s_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc18_U0_g_img_1_data_stream_0_V_din,
        if_full_n => g_img_1_data_stream_s_full_n,
        if_write => Loop_2_proc18_U0_g_img_1_data_stream_0_V_write,
        if_dout => g_img_1_data_stream_s_dout,
        if_empty_n => g_img_1_data_stream_s_empty_n,
        if_read => Loop_3_proc_U0_g_img_1_data_stream_0_V_read);





    ap_sync_reg_Block_Mat_exit16542_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit16542_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit16542_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit16542_U0_ap_ready <= ap_sync_Block_Mat_exit16542_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_Mat_exit16542_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit16542_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit16542_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit16542_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit16542_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit16542_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit16542_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_Mat_exit16542_U0_ap_continue <= packets_cast_loc_cha_full_n;
    Block_Mat_exit16542_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit16542_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit16542_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit16542_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc_U0_ap_start <= (packets_cast_loc_cha_empty_n and (ap_sync_reg_Loop_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    Loop_2_proc18_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc18_U0_ap_start <= ap_start;
    Loop_2_proc18_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc18_U0_start_write <= ap_const_logic_0;
    Loop_3_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_3_proc_U0_ap_start <= ap_start;
    Loop_3_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_3_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_packets_cast_loc_cha <= Block_Mat_exit16542_U0_ap_done;
    ap_done <= Loop_3_proc_U0_ap_done;
    ap_idle <= ((packets_cast_loc_cha_empty_n xor ap_const_logic_1) and Loop_3_proc_U0_ap_idle and Loop_2_proc18_U0_ap_idle and Loop_1_proc_U0_ap_idle and Block_Mat_exit16542_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_AXI_LITE_clk_inv_assign_proc : process(ap_rst_n_AXI_LITE_clk)
    begin
                ap_rst_n_AXI_LITE_clk_inv <= not(ap_rst_n_AXI_LITE_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_Mat_exit16542_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit16542_U0_ap_ready or Block_Mat_exit16542_U0_ap_ready);
    ap_sync_Loop_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_1_proc_U0_ap_ready or Loop_1_proc_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_3_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_1_proc_U0_ap_ready and ap_sync_Block_Mat_exit16542_U0_ap_ready);
    in_stream_TREADY <= Loop_1_proc_U0_in_stream_TREADY;
    out_stream_TDATA <= Loop_3_proc_U0_out_stream_TDATA;
    out_stream_TLAST <= Loop_3_proc_U0_out_stream_TLAST;
    out_stream_TUSER <= Loop_3_proc_U0_out_stream_TUSER;
    out_stream_TVALID <= Loop_3_proc_U0_out_stream_TVALID;
end behav;
