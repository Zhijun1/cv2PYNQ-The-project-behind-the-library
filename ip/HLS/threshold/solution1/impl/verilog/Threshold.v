// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Threshold (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_rows_V,
        src_cols_V,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        thresh,
        maxval,
        thresh_type
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_rows_V;
input  [31:0] src_cols_V;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [31:0] thresh;
input  [31:0] maxval;
input  [31:0] thresh_type;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_386;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_reg_386;
reg   [10:0] t_V_1_reg_176;
wire   [7:0] p_thresh_fu_187_p1;
reg    ap_block_state1;
wire   [7:0] p_maxval_fu_191_p1;
wire   [11:0] tmp_2_fu_195_p1;
wire   [11:0] tmp_3_fu_199_p1;
wire   [0:0] sel_tmp_fu_203_p2;
wire   [0:0] sel_tmp2_fu_209_p2;
wire   [0:0] sel_tmp4_fu_215_p2;
wire   [0:0] sel_tmp6_fu_221_p2;
wire   [0:0] sel_tmp8_fu_227_p2;
wire   [0:0] exitcond1_i_fu_237_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] i_V_fu_242_p2;
reg   [10:0] i_V_reg_381;
wire   [0:0] exitcond_i_fu_252_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_386;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_reg_386;
wire   [10:0] j_V_fu_257_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_4_reg_395;
wire   [0:0] tmp_i_31_fu_263_p2;
reg   [0:0] tmp_i_31_reg_403;
reg   [0:0] ap_reg_pp0_iter2_tmp_i_31_reg_403;
wire   [7:0] d_val_0_8_fu_298_p3;
reg   [7:0] d_val_0_8_reg_412;
wire   [7:0] d_val_0_fu_323_p3;
reg   [7:0] d_val_0_reg_417;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] t_V_reg_165;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] t_V_cast_i_fu_233_p1;
wire   [11:0] t_V_1_cast_i_fu_248_p1;
wire   [7:0] d_val_0_5_fu_279_p3;
wire   [7:0] d_val_0_4_fu_273_p3;
wire   [7:0] d_val_0_6_fu_285_p3;
wire   [7:0] d_val_0_3_fu_268_p3;
wire   [7:0] d_val_0_7_fu_291_p3;
wire   [7:0] d_val_0_2_fu_311_p3;
wire   [7:0] d_val_0_1_fu_305_p3;
wire   [7:0] d_val_0_9_fu_317_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_i_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_i_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((exitcond1_i_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_252_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_176 <= j_V_fu_257_p2;
    end else if (((exitcond1_i_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_176 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_reg_165 <= i_V_reg_381;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_165 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_386 <= exitcond_i_reg_386;
        exitcond_i_reg_386 <= exitcond_i_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_i_reg_386 <= ap_reg_pp0_iter1_exitcond_i_reg_386;
        ap_reg_pp0_iter2_tmp_i_31_reg_403 <= tmp_i_31_reg_403;
        ap_reg_pp0_iter3_exitcond_i_reg_386 <= ap_reg_pp0_iter2_exitcond_i_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((sel_tmp8_fu_227_p2 == 1'd0) & (sel_tmp6_fu_221_p2 == 1'd0) & (ap_reg_pp0_iter1_exitcond_i_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_val_0_8_reg_412 <= d_val_0_8_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_i_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_val_0_reg_417 <= d_val_0_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_381 <= i_V_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_386 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_395 <= src_data_stream_V_dout;
        tmp_i_31_reg_403 <= tmp_i_31_fu_263_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_252_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_i_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_i_reg_386 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_i_reg_386 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_i_reg_386 == 1'd0) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_i_reg_386 == 1'd0) & (src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((ap_reg_pp0_iter3_exitcond_i_reg_386 == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_val_0_1_fu_305_p3 = ((ap_reg_pp0_iter2_tmp_i_31_reg_403[0:0] === 1'b1) ? p_maxval_fu_191_p1 : 8'd0);

assign d_val_0_2_fu_311_p3 = ((ap_reg_pp0_iter2_tmp_i_31_reg_403[0:0] === 1'b1) ? 8'd0 : p_maxval_fu_191_p1);

assign d_val_0_3_fu_268_p3 = ((tmp_i_31_reg_403[0:0] === 1'b1) ? p_thresh_fu_187_p1 : tmp_4_reg_395);

assign d_val_0_4_fu_273_p3 = ((tmp_i_31_reg_403[0:0] === 1'b1) ? tmp_4_reg_395 : 8'd0);

assign d_val_0_5_fu_279_p3 = ((tmp_i_31_reg_403[0:0] === 1'b1) ? 8'd0 : tmp_4_reg_395);

assign d_val_0_6_fu_285_p3 = ((sel_tmp_fu_203_p2[0:0] === 1'b1) ? d_val_0_5_fu_279_p3 : tmp_4_reg_395);

assign d_val_0_7_fu_291_p3 = ((sel_tmp2_fu_209_p2[0:0] === 1'b1) ? d_val_0_4_fu_273_p3 : d_val_0_6_fu_285_p3);

assign d_val_0_8_fu_298_p3 = ((sel_tmp4_fu_215_p2[0:0] === 1'b1) ? d_val_0_3_fu_268_p3 : d_val_0_7_fu_291_p3);

assign d_val_0_9_fu_317_p3 = ((sel_tmp6_fu_221_p2[0:0] === 1'b1) ? d_val_0_2_fu_311_p3 : d_val_0_8_reg_412);

assign d_val_0_fu_323_p3 = ((sel_tmp8_fu_227_p2[0:0] === 1'b1) ? d_val_0_1_fu_305_p3 : d_val_0_9_fu_317_p3);

assign dst_data_stream_V_din = d_val_0_reg_417;

assign exitcond1_i_fu_237_p2 = ((t_V_cast_i_fu_233_p1 == tmp_2_fu_195_p1) ? 1'b1 : 1'b0);

assign exitcond_i_fu_252_p2 = ((t_V_1_cast_i_fu_248_p1 == tmp_3_fu_199_p1) ? 1'b1 : 1'b0);

assign i_V_fu_242_p2 = (t_V_reg_165 + 11'd1);

assign j_V_fu_257_p2 = (t_V_1_reg_176 + 11'd1);

assign p_maxval_fu_191_p1 = maxval[7:0];

assign p_thresh_fu_187_p1 = thresh[7:0];

assign sel_tmp2_fu_209_p2 = ((thresh_type == 32'd3) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_215_p2 = ((thresh_type == 32'd2) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_221_p2 = ((thresh_type == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_227_p2 = ((thresh_type == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_203_p2 = ((thresh_type == 32'd4) ? 1'b1 : 1'b0);

assign t_V_1_cast_i_fu_248_p1 = t_V_1_reg_176;

assign t_V_cast_i_fu_233_p1 = t_V_reg_165;

assign tmp_2_fu_195_p1 = src_rows_V[11:0];

assign tmp_3_fu_199_p1 = src_cols_V[11:0];

assign tmp_i_31_fu_263_p2 = ((src_data_stream_V_dout > p_thresh_fu_187_p1) ? 1'b1 : 1'b0);

endmodule //Threshold
